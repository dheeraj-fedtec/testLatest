name: üõ°Ô∏è Pull Request Protection

on:
  pull_request:
    branches:
      - main
      - master
    types: [opened, synchronize, ready_for_review]

  # Trigger on pushes to main to detect direct commits
  push:
    branches:
      - main
      - master

jobs:
  # Job to validate that changes go through PR process
  enforce-pr-process:
    name: Enforce PR Process
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
        
      - name: Check if push is from PR merge or allowed setup
        run: |
          commit_message="${{ github.event.head_commit.message }}"
          
          echo "üîç Checking commit: $commit_message"
          
          # Allow PR merges
          if [[ "$commit_message" == *"Merge pull request"* ]] || [[ "$commit_message" == *"Auto-merge"* ]]; then
            echo "‚úÖ This is a PR merge, proceeding..."
            exit 0
          fi
          
          # Get list of changed files in this commit
          changed_files=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || echo "")
          echo "üìÅ Changed files: $changed_files"
          
          # Allow initial setup commit that adds branch protection files
          if [[ "$changed_files" == *"CODEOWNERS"* ]] && [[ "$changed_files" == *".github/workflows/pull-request-protection.yml"* ]]; then
            echo "‚úÖ This appears to be a branch protection setup commit, allowing..."
            echo "‚ö†Ô∏è  Future direct pushes to main will be blocked!"
            exit 0
          fi
          
          # Allow workflow fixes
          if [[ "$commit_message" == *"Fix workflow"* ]] && [[ "$changed_files" == *".github/workflows/"* ]]; then
            echo "‚úÖ This appears to be a workflow fix, allowing..."
            echo "‚ö†Ô∏è  Future direct pushes to main will be blocked!"
            exit 0
          fi
          
          # Block all other direct pushes
          echo "‚ùå Direct pushes to main branch are not allowed!"
          echo "Please create a pull request for your changes."
          echo "If this is an emergency, you can temporarily disable branch protection in repository settings."
          exit 1

  # Job to check PR requirements
  pr-requirements:
    name: PR Requirements Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check PR requirements
        run: |
          echo "‚úÖ Pull request detected"
          echo "üìã PR Title: ${{ github.event.pull_request.title }}"
          echo "üë§ Author: ${{ github.event.pull_request.user.login }}"
          echo "üéØ Target Branch: ${{ github.event.pull_request.base.ref }}"
          echo "üîÑ Source Branch: ${{ github.event.pull_request.head.ref }}"
          
      - name: Validate PR title format
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          
          # Check if PR title follows conventional commit format (optional)
          if [[ "$PR_TITLE" =~ ^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: .+ ]]; then
            echo "‚úÖ PR title follows conventional commit format"
          else
            echo "‚ÑπÔ∏è PR title doesn't follow conventional commit format (feat/fix/docs/etc.)"
            echo "   This is optional but recommended for better changelog generation"
          fi
          
      - name: Validate PR description
        run: |
          if [[ -z "${{ github.event.pull_request.body }}" ]]; then
            echo "‚ö†Ô∏è Warning: PR description is empty. Please add a description explaining:"
            echo "   - What changes were made"
            echo "   - Why the changes were necessary"
            echo "   - How to test the changes"
          else
            echo "‚úÖ PR has description"
            
            # Check for common PR description elements
            PR_BODY="${{ github.event.pull_request.body }}"
            
            if [[ "$PR_BODY" == *"## "* ]] || [[ "$PR_BODY" == *"### "* ]]; then
              echo "‚úÖ PR description appears to be well-structured"
            fi
            
            if [[ "$PR_BODY" == *"test"* ]] || [[ "$PR_BODY" == *"Test"* ]]; then
              echo "‚úÖ PR description mentions testing"
            fi
          fi

      - name: Check PR size
        run: |
          # Get the number of changed files and lines
          CHANGED_FILES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "${{ github.event.pull_request.url }}/files" | jq length)
          
          ADDITIONS=$(echo '${{ github.event.pull_request.additions }}')
          DELETIONS=$(echo '${{ github.event.pull_request.deletions }}')
          TOTAL_CHANGES=$((ADDITIONS + DELETIONS))
          
          echo "üìä PR Statistics:"
          echo "   - Files changed: $CHANGED_FILES"
          echo "   - Lines added: $ADDITIONS"
          echo "   - Lines deleted: $DELETIONS"
          echo "   - Total changes: $TOTAL_CHANGES"
          
          # Warn about large PRs
          if [ "$TOTAL_CHANGES" -gt 500 ]; then
            echo "‚ö†Ô∏è This is a large PR with $TOTAL_CHANGES line changes."
            echo "   Consider breaking it into smaller, focused PRs for easier review."
          elif [ "$TOTAL_CHANGES" -gt 1000 ]; then
            echo "üö® This is a very large PR with $TOTAL_CHANGES line changes."
            echo "   Please consider breaking it into multiple smaller PRs."
          else
            echo "‚úÖ PR size is reasonable for review"
          fi

  # Job to check for common issues
  pr-quality-checks:
    name: PR Quality Checks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Check for merge conflicts
        run: |
          echo "üîç Checking for merge conflicts..."
          
          # Fetch the target branch
          git fetch origin ${{ github.event.pull_request.base.ref }}
          
          # Check if merge would have conflicts
          if git merge-tree $(git merge-base HEAD origin/${{ github.event.pull_request.base.ref }}) HEAD origin/${{ github.event.pull_request.base.ref }} | grep -q "<<<<<<< "; then
            echo "‚ùå This PR has merge conflicts that need to be resolved"
            echo "   Please rebase or merge the target branch to resolve conflicts"
            exit 1
          else
            echo "‚úÖ No merge conflicts detected"
          fi

      - name: Check for sensitive files
        run: |
          echo "üîç Checking for sensitive files..."
          
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD)
          
          # Check for potentially sensitive files
          SENSITIVE_PATTERNS=(
            "\.env$"
            "\.env\."
            "config\.json$"
            "secrets\."
            "\.key$"
            "\.pem$"
            "\.p12$"
            "\.jks$"
            "password"
            "secret"
          )
          
          FOUND_SENSITIVE=false
          for file in $CHANGED_FILES; do
            for pattern in "${SENSITIVE_PATTERNS[@]}"; do
              if [[ "$file" =~ $pattern ]]; then
                echo "‚ö†Ô∏è Potentially sensitive file detected: $file"
                FOUND_SENSITIVE=true
              fi
            done
          done
          
          if [ "$FOUND_SENSITIVE" = true ]; then
            echo ""
            echo "üö® Please review the files above to ensure no secrets are committed"
            echo "   Consider using environment variables or secret management instead"
          else
            echo "‚úÖ No obviously sensitive files detected"
          fi

      - name: Check commit messages
        run: |
          echo "üîç Checking commit messages..."
          
          # Get commit messages in this PR
          COMMITS=$(git log --pretty=format:"%s" origin/${{ github.event.pull_request.base.ref }}..HEAD)
          
          echo "üìù Commit messages in this PR:"
          echo "$COMMITS"
          echo ""
          
          # Check for common issues
          if echo "$COMMITS" | grep -qi "wip\|todo\|fixme\|hack"; then
            echo "‚ö†Ô∏è Found commits with WIP/TODO/FIXME/HACK - consider cleaning up before merge"
          fi
          
          if echo "$COMMITS" | grep -q "^Merge branch"; then
            echo "‚ÑπÔ∏è Found merge commits - consider using rebase for cleaner history"
          fi
          
          echo "‚úÖ Commit message check completed"

  # Summary job
  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [pr-requirements, pr-quality-checks]
    if: always() && github.event_name == 'pull_request'
    
    steps:
      - name: PR Summary
        run: |
          echo "## üîç Pull Request Review Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**PR**: #${{ github.event.number }} - ${{ github.event.pull_request.title }}" >> $GITHUB_STEP_SUMMARY
          echo "**Author**: @${{ github.event.pull_request.user.login }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target**: ${{ github.event.pull_request.base.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "**Source**: ${{ github.event.pull_request.head.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.pr-requirements.result }}" == "success" ]]; then
            echo "‚úÖ **Requirements Check**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Requirements Check**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.pr-quality-checks.result }}" == "success" ]]; then
            echo "‚úÖ **Quality Checks**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è **Quality Checks**: Issues found" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä PR Statistics" >> $GITHUB_STEP_SUMMARY
          echo "- **Files changed**: ${{ github.event.pull_request.changed_files }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Additions**: +${{ github.event.pull_request.additions }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deletions**: -${{ github.event.pull_request.deletions }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commits**: ${{ github.event.pull_request.commits }}" >> $GITHUB_STEP_SUMMARY 