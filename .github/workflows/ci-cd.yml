name: 🚀 CI/CD Pipeline for testlatest

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'backend/**'
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Run Tests'
        required: true
        default: true
        type: boolean
      build_frontend:
        description: 'Build Frontend'
        required: true
        default: true
        type: boolean
      build_backend:
        description: 'Build Backend'
        required: true
        default: true
        type: boolean

env:
  NODE_VERSION: '20'
  JAVA_VERSION: '21'
  PYTHON_VERSION: '3.11'

jobs:
  # Job to detect changes and set build flags
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      build-backend: ${{ steps.build-flags.outputs.backend }}
      build-frontend: ${{ steps.build-flags.outputs.frontend }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Check for changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        base: ${{ github.event.repository.default_branch }}
        filters: |
          backend:
            - 'backend/**'
          frontend:
            - 'frontend/**'

    - name: Set build flags
      id: build-flags
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "backend=${{ github.event.inputs.build_backend }}" >> $GITHUB_OUTPUT
          echo "frontend=${{ github.event.inputs.build_frontend }}" >> $GITHUB_OUTPUT
        else
          echo "backend=${{ steps.changes.outputs.backend }}" >> $GITHUB_OUTPUT
          echo "frontend=${{ steps.changes.outputs.frontend }}" >> $GITHUB_OUTPUT
        fi

  # Backend build and test job
  backend-build:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.build-backend == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Java Spring Boot setup
    - name: Set up Java (for Spring Boot)
      if: contains(github.repository, 'java') || contains(github.repository, 'spring')
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    # .NET setup
    - name: Set up .NET (for .NET projects)
      if: contains(github.repository, 'dotnet') || contains(github.repository, 'csharp')
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    # Python setup
    - name: Set up Python (for FastAPI)
      if: contains(github.repository, 'python') || contains(github.repository, 'fastapi')
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    # Java Spring Boot tests
    - name: Run Java Spring Boot tests
      if: contains(github.repository, 'java') || contains(github.repository, 'spring')
      working-directory: ./backend
      run: |
        echo "🧪 Running Java Spring Boot tests..."
        mvn clean test
        echo "📊 Generating code coverage report..."
        mvn jacoco:report
        echo "✅ Backend tests completed successfully"

    # .NET tests
    - name: Run .NET tests
      if: contains(github.repository, 'dotnet') || contains(github.repository, 'csharp')
      working-directory: ./backend
      run: |
        echo "🧪 Running .NET tests..."
        dotnet test --configuration Release --logger trx --collect:"XPlat Code Coverage"
        echo "✅ .NET tests completed successfully"

    # Python tests
    - name: Run Python tests
      if: contains(github.repository, 'python') || contains(github.repository, 'fastapi')
      working-directory: ./backend
      run: |
        echo "🧪 Installing Python dependencies..."
        pip install -r requirements.txt
        pip install pytest pytest-cov
        echo "🧪 Running Python tests..."
        pytest --cov=. --cov-report=xml
        echo "✅ Python tests completed successfully"

    # Upload test results for Java
    - name: Upload Java test results
      if: (contains(github.repository, 'java') || contains(github.repository, 'spring')) && always()
      uses: actions/upload-artifact@v4
      with:
        name: backend-test-results-java
        path: backend/target/surefire-reports/

    # Upload coverage for Java
    - name: Upload Java coverage reports
      if: contains(github.repository, 'java') || contains(github.repository, 'spring')
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage-java
        path: backend/target/site/jacoco/

    # Upload test results for .NET
    - name: Upload .NET test results
      if: (contains(github.repository, 'dotnet') || contains(github.repository, 'csharp')) && always()
      uses: actions/upload-artifact@v4
      with:
        name: backend-test-results-dotnet
        path: backend/TestResults/

    # Upload coverage for Python
    - name: Upload Python coverage reports
      if: contains(github.repository, 'python') || contains(github.repository, 'fastapi')
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage-python
        path: backend/coverage.xml

    # Build Java application
    - name: Build Java application
      if: contains(github.repository, 'java') || contains(github.repository, 'spring')
      working-directory: ./backend
      run: |
        echo "🔨 Building Java application..."
        mvn clean package -DskipTests
        echo "✅ Java build completed successfully"

    # Build .NET application
    - name: Build .NET application
      if: contains(github.repository, 'dotnet') || contains(github.repository, 'csharp')
      working-directory: ./backend
      run: |
        echo "🔨 Building .NET application..."
        dotnet build --configuration Release
        echo "✅ .NET build completed successfully"

    # Upload Java build artifacts
    - name: Upload Java build artifacts
      if: contains(github.repository, 'java') || contains(github.repository, 'spring')
      uses: actions/upload-artifact@v4
      with:
        name: backend-jar
        path: backend/target/*.jar

    # Upload .NET build artifacts
    - name: Upload .NET build artifacts
      if: contains(github.repository, 'dotnet') || contains(github.repository, 'csharp')
      uses: actions/upload-artifact@v4
      with:
        name: backend-dotnet
        path: backend/bin/Release/

  # Frontend build and test job
  frontend-build:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.build-frontend == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: |
        echo "📦 Installing frontend dependencies..."
        npm ci
        echo "✅ Dependencies installed successfully"

    # Run frontend tests (React/Angular)
    - name: Run frontend tests
      working-directory: ./frontend
      run: |
        echo "🧪 Running frontend tests..."
        if [ -f "package.json" ] && grep -q "\"test\"" package.json; then
          npm test -- --coverage --watchAll=false
        else
          echo "No test script found, skipping tests"
        fi
        echo "✅ Frontend tests completed"

    # Lint frontend code
    - name: Lint frontend code
      working-directory: ./frontend
      run: |
        echo "🔍 Linting frontend code..."
        if [ -f "package.json" ] && grep -q "\"lint\"" package.json; then
          npm run lint
        else
          echo "No lint script found, skipping linting"
        fi
        echo "✅ Frontend linting completed"

    - name: Build frontend
      working-directory: ./frontend
      run: |
        echo "🔨 Building frontend application..."
        npm run build
        echo "✅ Frontend build completed successfully"

    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/

    # Upload test coverage if available
    - name: Upload frontend coverage
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: frontend/coverage/

  # Code quality and security checks
  code-quality:
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build]
    if: always() && (needs.backend-build.result == 'success' || needs.frontend-build.result == 'success')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Run CodeQL analysis
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript, java, python, csharp

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    # Run dependency check
    - name: Run dependency check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'testlatest'
        path: '.'
        format: 'ALL'

    - name: Upload dependency check results
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-report
        path: reports/

  # Deployment summary
  build-summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, backend-build, frontend-build, code-quality]
    if: always()
    steps:
    - name: Build Summary
      run: |
        echo "## 🚀 Build Summary for testlatest" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.detect-changes.outputs.build-backend }}" == "true" ]]; then
          if [[ "${{ needs.backend-build.result }}" == "success" ]]; then
            echo "✅ **Backend**: Build and tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Backend**: Build or tests failed" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "⏭️ **Backend**: No changes detected, skipped build" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.detect-changes.outputs.build-frontend }}" == "true" ]]; then
          if [[ "${{ needs.frontend-build.result }}" == "success" ]]; then
            echo "✅ **Frontend**: Build and tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Frontend**: Build or tests failed" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "⏭️ **Frontend**: No changes detected, skipped build" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.code-quality.result }}" == "success" ]]; then
          echo "✅ **Code Quality**: Security and quality checks passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Code Quality**: Some checks failed or were skipped" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Build Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "- **PR**: #${{ github.event.number }} - ${{ github.event.pull_request.title }}" >> $GITHUB_STEP_SUMMARY
        fi 